version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      id:
        type: string
    steps:
      - run:
          name: Destroy udapeaple backend cfn stack
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
          when: on_fail
      - run:
          name: Destroy udapeaple frontend cfn stack
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
          when: on_fail

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      id:
        type: string
    steps:
      # - run:
      #     name: Install dependencies
      #     command: |
      #       apk add --update curl
      - run:
          name: Revert migrations
          command: |
            SUCCESS=$(curl -H "token: 39699d09-1e0c-450c-9d99-23305383daef" --request GET https://api.memstash.io/values/udapeople_migration)
            echo $SUCCESS
            if [[ "$SUCCESS" == "success" ]]
            then
              pwd
              cd backend
              ls -la
              npm run migrations:revert
            fi
          when: on_fail
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies with NPM
          command: cd frontend && npm install
      - run:
          name: Build front-end
          command: |
            cd frontend && npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies with NPM
          command: cd backend && npm install
      - run:
          name: Back-end build
          command: |
             cd backend && npm audit fix
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: Install dependencies with NPM
          command: cd frontend && npm install
      - run:
          name: Front-End Test
          command: |
             cd frontend && npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: test-frontend
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: Install dependencies with NPM
          command: cd backend && npm install
      - run:
          name: Back-End Test
          command: |
             cd backend && npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: test-backend
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Front-End Package Audit
          command: cd frontend && npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [build-backend]
      - run:
          name: Back-End Package Audit
          command: |
            cd backend
            npm update
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Save backend Address in memstash
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            curl -H "Content-Type: text/plain" -H "token: 39699d09-1e0c-450c-9d99-23305383daef" --request PUT --data "http://$BACKEND_IP:3030" https://api.memstash.io/values/udapeople_backend
      - run: 
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Save back-end ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> inventory
            cat inventory
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
  
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["20:44:d5:85:0d:85:94:4e:cc:a0:ea:a4:b4:4e:0d:3f"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            ls
            cat inventory
            ansible-playbook -i inventory configure-server.yml
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}     

  run-migrations:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: awscli install
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3
            sudo apt-get -qq install awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            ls
            npm run build
            ls
            npm run migrations > migration_status
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully" migration_status
            then
              echo "migration successfull"
              curl -H "Content-Type: text/plain" -H "token: 39699d09-1e0c-450c-9d99-23305383daef" --request PUT --data "success" https://api.memstash.io/values/udapeople_migration
            else
              echo "migration failed"
              curl -H "Content-Type: text/plain" -H "token: 39699d09-1e0c-450c-9d99-23305383daef" --request PUT --data "failure" https://api.memstash.io/values/udapeople_migration
            fi
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}    

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
            yum -y install tar gzip
      - run:
          name: Get backend url
          command: |
            cd frontend
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
      - run:
          name: Deploy frontend objects
          command: |
            echo "${CIRCLE_WORKFLOW_ID:0:7}"
            cd frontend
            npm install
            npm run build
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["20:44:d5:85:0d:85:94:4e:cc:a0:ea:a4:b4:4e:0d:3f"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm
            pip install awscli
      - run:
          name: Deploy backend
          no_output_timeout: 30m
          command: |
            tar -C backend -czvf artifact.tar.gz .
            ls
            cd ./.circleci/ansible
            ls
            cat inventory
            ls 
            ansible-playbook -i inventory deploy-backend.yml
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com"
            curl -s ${URL} | grep -q "Welcome"
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(curl -H "token: 39699d09-1e0c-450c-9d99-23305383daef" --request GET https://api.memstash.io/values/udapeople_backend_url)
            URL="$BACKEND_IP/api/status"
            echo $URL
            curl $URL
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
            
            export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
            
            echo Old workflow Id: "${OldWorkflowID}"
            echo STACKS: "$STACKS"

            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name udapeaple-cloudfront \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople

            curl -H "Content-Type: text/plain" -H "token: 39699d09-1e0c-450c-9d99-23305383daef" --request PUT --data "$WorkflowID" https://api.memstash.io/values/WorkflowID
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  cleanup:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Get old stack workflow id
            command: |
              export OldWorkflowID=$(curl -H "token: 39699d09-1e0c-450c-9d99-23305383daef" --request GET https://api.memstash.io/values/WorkflowID)
              export STACKS=$(aws cloudformation list-stacks \
              --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE \
              --no-paginate --output text)
              
              echo Old workflow Id: "${OldWorkflowID}"
              echo STACKS: "$STACKS"
              
              CurrentWorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
              
              if [[ "$CurrentWorkflowID" != "$OldWorkflowID" ]]
                then
                  aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
                  aws s3 rb s3://udapeople-${OldWorkflowID} --force
                  aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
                  aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
                  echo "Stacks deleted succesfully"
                fi

workflows:
  default:
    jobs:
      - build-frontend:
          filters:
            branches:
              only:
                - master
      - build-backend:
          filters:
            branches:
              only:
                - master
      - test-frontend:
          requires: [build-frontend]
          filters:
            branches:
              only:
                - master
      - test-backend:
          requires: [build-backend]
          filters:
            branches:
              only:
                - master
      - scan-backend:
          filters:
            branches:
              only:
                - master
          requires:
            - build-backend
      - scan-frontend:
          filters:
            branches:
              only:
                - master
          requires:
            - build-frontend
      - deploy-infrastructure:
          requires: [test-frontend, test-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [deploy-backend, deploy-frontend]